1.Check if a string is a palindrome without using slicing or reversed.

  def is_palindrome(word):
    word_len=len(word)
    for i in range(word_len//2):
        if(word[i]!=word[(word_len-1-i)]):
            return False
    return True
  word=input("Enter a word: ") 
  if is_palindrome(word):
      print("Palindrome")
  else:
      print('Not a Palindrome')

2.Print the square of each number from 1 to N using a loop.
  
  def sqare_num(n):
    for i in range(1,n+1):
        print(i**2)
  num=int(input("Enter a number: "))
  sqare_num(num)

3.Find the GCD (Greatest Common Divisor) of two numbers using a loop.

  def GCD_num(n1,n2):
    GCD=1
    for i in range(1,min(num1,num2)+1):
        if(num1%i==0) and (num2%i==0):
            GCD=i 
    print(GCD)
        
  num1=int(input())
  num2=int(input())
  GCD_num(num1,num2)

4.a Python program using nested loops to print the multiplication tables from 1 to 20.
 
  def num_table(n):
    for i in range(1,n+1):
        for j in range(1,21):
            print(i,'*',j,"=",(i*j))
        print(" ")
  num=int(input())
  num_table(num)


5.Count Prime Numbers in a Range (1 to 100)
Using nested loops, count how many prime numbers exist between 1 and 100.

 def prime_count(num):
    count=0
    for i in range(2,num):
        for j in range(2,i):
            if(i%j)==0:
                break
        else:
            count+=1
    print(count)
 n=int(input())
 prime_count(n)

6.Print all prime numbers between 1 and N

 def prime_count(num):
    for i in range(2,num):
        count=0
        for j in range(2,i):
            if(i%j)==0:
                count+=1
        if(count==0):
            print(i)
 n=int(input())
 prime_count(n)

7.Armstrong Numbers in a Range
  
 def count_digits(num):
    n = 0
    temp = num
    for i in range(num):
        if temp == 0:
            break
        temp = temp // 10
        n += 1
    return n
def is_armstrong(num):
    n = count_digits(num)
    sum = 0
    temp = num
    for i in range(num):
        if temp == 0:
            break
        digit = temp % 10
        power = 1
        for j in range(n):
            power *= digit
        sum += power
        temp = temp // 10
    return sum == num
number = int(input("Enter a number: "))
if is_armstrong(number):
    print("Armstrong number")
else:
    print("Not an Armstrong number")

8.Number Reversal Without String Conversion
  
 def reverse_num(num):
    rev_num=0 
    temp=num
    for i in range(len(str(temp))):
        digit=temp%10 
        rev_num=rev_num*10+digit 
        temp=temp//10
    print(rev_num)
 num=int(input())
 reverse_num(num)

9. Fibonacci Series Up to N Terms

 def fibonacci_series(n):
    a = 0
    b = 1
    for i in range(n):
        print(a,end=" ")
        c = a + b
        a = b
        b = c
 n = int(input(""))
 fibonacci_series(n)

10. Pattern Printing (Diamond of Stars)
   
  def pattern_diamond(num):
    for i in range(num):
        print((num-i)*" "+i*"* ")
    for j in range(num,0,-1):
        print((num-j)*" "+j*"* ")

 num=int(input())
 pattern_diamond(num)

12.LCM of Two Numbers
 
   def LCM_num(a,b):
    if a > b:
        greater = a
    else:
        greater = b
    while True:
        if (greater % a == 0) and (greater % b == 0):
            print("LCM is", greater)
            break
        greater += 1
  a = int(input("Enter first number: "))
  b = int(input("Enter second number: "))
  LCM_num(a,b)


13. Count the Frequency of Each Digit in a Number
  
  def digit_count(num):
    digit_count = [0] * 10
    for ch in num:
        if ch.isdigit():  
            digit = int(ch)
            digit_count[digit] += 1
    for i in range(10):
        if digit_count[i] > 0:
            print(i, 'occurs' ,digit_count[i] ,'times')
  num = input("Enter a number: ")
  digit_count(num)

14.Strong Numbers in a Range
  
  def strong_num(start,end):
    for num in range(start, end + 1):
        temp = num
        sum_fact = 0
        while temp > 0:
            digit = temp % 10
            fact = 1
            for i in range(1, digit + 1):
                fact *= i
            sum_fact += fact
            temp = temp // 10
        if sum_fact == num:
            print(num)

start = int(input("Enter start of range: "))
end = int(input("Enter end of range: "))
strong_num(start,end)


15.Print Prime Pyramid

 def prime_pattern(num):
    prime_lis=[]
    for i in range(2,num):
        count=0
        for j in range(2,i):
            if(i%j)==0:
                count+=1
        if(count==0):
            prime_lis.append(i)
    c=1
    for i in (prime_lis):
        print((str(i)+" ")*c)
        c+=1
num=int(input())
prime_pattern(num)
       

16.Count Vowels in a string

  def count_vowels(s):
    count = 0
    for char in s.lower():
        if char in 'aeiou':
            count += 1
    return count
s=input()
print(count_vowels(s))
   
17.Reverse a String

 def reverse_string(s):
    rev = ""
    for char in s:
        rev = char + rev
    print("Reversed string:", rev)
s=input()
reverse_string(s)

18.Print the Fibonacci Series up to N terms

 def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        print(a, end=" ")
        a, b = b, a + b
    print()

19.Pascalâ€™s Triangle using Loops
   
 def pascals_triangle(n):
    for i in range(n):
        num = 1
        print(" " * (n - i), end="")
        for j in range(i + 1):
            print(num, end=" ")
            num = num * (i - j) // (j + 1)
        print() 
  n = int(input("Enter: "))
  pascals_triangle(n)

20.Calculate the sum of squares of digits

 def sum_of_squares(n):
    total = 0
    while n > 0:
        digit = n % 10
        total += digit ** 2
        n //= 10
    return total
n=int(input())
print(sum_of_squares(n))

